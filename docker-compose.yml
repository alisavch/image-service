version: '3.3'

services:
  postgresql:
    image: postgres:latest
    restart: always
    container_name: postgresql
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "8001:5432"
    volumes:
      - ~/.docker-conf/postgresql:/var/lib/postgresql/data
      - ./sql/01-init.sh:/docker-entrypoint-initdb.d/01-init.sh
    networks:
      - fullstack

  rabbitmq:
    image: rabbitmq:management
    restart: always
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/mnesia/
    networks:
      - fullstack

  api:
    image: alisavch/api:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "40000:40000"
    container_name: api
    command: /dlv --listen=:40000 --headless=true --api-version=2 exec /api
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    env_file: .env
    restart: always
    volumes:
      - ./uploads://uploads
      - ./results://results
      - $HOME/Downloads://root/Downloads
    depends_on:
      - postgresql
      - rabbitmq
    networks:
      - fullstack

  consumer:
    image: alisavch/consumer:latest
    build:
      context: .
      dockerfile: Dockerfile-consumer
    container_name: consumer
    env_file: .env
    restart: always
    depends_on:
      - api
      - rabbitmq
    networks:
      - fullstack

volumes:
  api:
  database_postgres:
networks:
  fullstack:
    driver: bridge
