// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/alisavch/image-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Image is an autogenerated mock type for the Image type
type Image struct {
	mock.Mock
}

// CompressImage provides a mock function with given fields: quality, uploadedImage
func (_m *Image) CompressImage(quality int, uploadedImage models.UploadedImage) (models.ResultedImage, error) {
	ret := _m.Called(quality, uploadedImage)

	var r0 models.ResultedImage
	if rf, ok := ret.Get(0).(func(int, models.UploadedImage) models.ResultedImage); ok {
		r0 = rf(quality, uploadedImage)
	} else {
		r0 = ret.Get(0).(models.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, models.UploadedImage) error); ok {
		r1 = rf(quality, uploadedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertToType provides a mock function with given fields: uploadedImage
func (_m *Image) ConvertToType(uploadedImage models.UploadedImage) (models.ResultedImage, error) {
	ret := _m.Called(uploadedImage)

	var r0 models.ResultedImage
	if rf, ok := ret.Get(0).(func(models.UploadedImage) models.ResultedImage); ok {
		r0 = rf(uploadedImage)
	} else {
		r0 = ret.Get(0).(models.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.UploadedImage) error); ok {
		r1 = rf(uploadedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRequest provides a mock function with given fields: ctx, user, uplImg, resImg, uI, r
func (_m *Image) CreateRequest(ctx context.Context, user models.User, uplImg models.UploadedImage, resImg models.ResultedImage, uI models.UserImage, r models.Request) (int, error) {
	ret := _m.Called(ctx, user, uplImg, resImg, uI, r)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, models.User, models.UploadedImage, models.ResultedImage, models.UserImage, models.Request) int); ok {
		r0 = rf(ctx, user, uplImg, resImg, uI, r)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User, models.UploadedImage, models.ResultedImage, models.UserImage, models.Request) error); ok {
		r1 = rf(ctx, user, uplImg, resImg, uI, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOriginalImage provides a mock function with given fields: ctx, id
func (_m *Image) FindOriginalImage(ctx context.Context, id int) (models.UploadedImage, error) {
	ret := _m.Called(ctx, id)

	var r0 models.UploadedImage
	if rf, ok := ret.Get(0).(func(context.Context, int) models.UploadedImage); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.UploadedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTheResultingImage provides a mock function with given fields: ctx, id, _a2
func (_m *Image) FindTheResultingImage(ctx context.Context, id int, _a2 models.Service) (models.ResultedImage, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 models.ResultedImage
	if rf, ok := ret.Get(0).(func(context.Context, int, models.Service) models.ResultedImage); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Get(0).(models.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, models.Service) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserHistoryByID provides a mock function with given fields: ctx, id
func (_m *Image) FindUserHistoryByID(ctx context.Context, id int) ([]models.History, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.History
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.History); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveImage provides a mock function with given fields: filename, folder
func (_m *Image) SaveImage(filename string, folder string) (*models.Image, error) {
	ret := _m.Called(filename, folder)

	var r0 *models.Image
	if rf, ok := ret.Get(0).(func(string, string) *models.Image); ok {
		r0 = rf(filename, folder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filename, folder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: ctx, image
func (_m *Image) UploadImage(ctx context.Context, image models.UploadedImage) (int, error) {
	ret := _m.Called(ctx, image)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, models.UploadedImage) int); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.UploadedImage) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
