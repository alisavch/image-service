// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alisavch/image-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Image is an autogenerated mock type for the Image type
type Image struct {
	mock.Mock
}

// CompressImage provides a mock function with given fields: quality, uploadedImage
func (_m *Image) CompressImage(quality int, uploadedImage model.UploadedImage) (model.ResultedImage, error) {
	ret := _m.Called(quality, uploadedImage)

	var r0 model.ResultedImage
	if rf, ok := ret.Get(0).(func(int, model.UploadedImage) model.ResultedImage); ok {
		r0 = rf(quality, uploadedImage)
	} else {
		r0 = ret.Get(0).(model.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, model.UploadedImage) error); ok {
		r1 = rf(quality, uploadedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertToType provides a mock function with given fields: uploadedImage
func (_m *Image) ConvertToType(uploadedImage model.UploadedImage) (model.ResultedImage, error) {
	ret := _m.Called(uploadedImage)

	var r0 model.ResultedImage
	if rf, ok := ret.Get(0).(func(model.UploadedImage) model.ResultedImage); ok {
		r0 = rf(uploadedImage)
	} else {
		r0 = ret.Get(0).(model.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UploadedImage) error); ok {
		r1 = rf(uploadedImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRequest provides a mock function with given fields: ctx, user, uplImg, resImg, uI, r
func (_m *Image) CreateRequest(ctx context.Context, user model.User, uplImg model.UploadedImage, resImg model.ResultedImage, uI model.UserImage, r model.Request) (int, error) {
	ret := _m.Called(ctx, user, uplImg, resImg, uI, r)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.User, model.UploadedImage, model.ResultedImage, model.UserImage, model.Request) int); ok {
		r0 = rf(ctx, user, uplImg, resImg, uI, r)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User, model.UploadedImage, model.ResultedImage, model.UserImage, model.Request) error); ok {
		r1 = rf(ctx, user, uplImg, resImg, uI, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOriginalImage provides a mock function with given fields: ctx, id
func (_m *Image) FindOriginalImage(ctx context.Context, id int) (model.UploadedImage, error) {
	ret := _m.Called(ctx, id)

	var r0 model.UploadedImage
	if rf, ok := ret.Get(0).(func(context.Context, int) model.UploadedImage); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.UploadedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTheResultingImage provides a mock function with given fields: ctx, id, _a2
func (_m *Image) FindTheResultingImage(ctx context.Context, id int, _a2 model.Service) (model.ResultedImage, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 model.ResultedImage
	if rf, ok := ret.Get(0).(func(context.Context, int, model.Service) model.ResultedImage); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Get(0).(model.ResultedImage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, model.Service) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserHistoryByID provides a mock function with given fields: ctx, id
func (_m *Image) FindUserHistoryByID(ctx context.Context, id int) ([]model.History, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.History
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.History); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveImage provides a mock function with given fields: filename, folder, resultedFilename
func (_m *Image) SaveImage(filename string, folder string, resultedFilename string) error {
	ret := _m.Called(filename, folder, resultedFilename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(filename, folder, resultedFilename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadImage provides a mock function with given fields: ctx, image
func (_m *Image) UploadImage(ctx context.Context, image model.UploadedImage) (int, error) {
	ret := _m.Called(ctx, image)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.UploadedImage) int); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UploadedImage) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
